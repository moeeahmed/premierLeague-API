extends base

block append head
    title='Football API | Fixtures'


mixin fixtures(fixture)
    -var duration = moment.duration(moment(new Date()).diff(fixture.Date, 'minutes'));
    .game(data-fixture=`${fixture.HomeTeam}vs${fixture.AwayTeam}`).flex-bar
        p.home__team(style={'text-align': 'right', 'width':'40%'}) #{fixture.HomeTeam}  
        if fixture.Status == 'Not Started'
            p.score  #{moment(fixture.Date).format('HH:mm')}
        else if fixture.Postponed === true
            p.score  P : P
        else 
            p.score  #{fixture.HomeTeamScore} : #{fixture.AwayTeamScore}
        p.away__team(style={'text-align': 'left', 'width':'40%'}) #{fixture.AwayTeam}
        if fixture.status == 'Live'
            p.elapsedGameTime(style={'position':'absolute'}) #{duration}'

block content
    main.main.container--update
        include _teamAvgStats
        section.leftside--allfixtures.results(style="margin-top:0;")
            .header.header__home
                h1 All fixtures
            .container__fixtures
                each result in allFixtures
                    span.time #{moment(result._id).format('dddd Do MMMM YYYY')}
                    each game in result.results
                        +fixtures(game)
        section.rightside--fixtureupdate.fixturesstats
            .header.header__matchStats
                h1 #{latestFixture.HomeTeam} vs #{latestFixture.AwayTeam} Match Statistics
            .match--stats__container
                div.match--overview 
                    .column.slide-animation-FL 
                        .team.team--home
                            .team-logo(data-team=`${latestFixture.HomeTeam.replace(/\s/g,'')}`)
                                img(src=`/img/${latestFixture.HomeTeam.replace(/\s/g,'')}.png`)
                            h2.team-name #{latestFixture.HomeTeam}
                    .column.fadeIn-animation
                        .match-details
                            .match-date
                                p
                                    | Game week: 
                                    strong #{latestFixture.RoundNumber}
                                time 
                                    | #{moment(latestFixture.Date).format('LL').split(',')[0]} at 
                                    strong #{moment(latestFixture.Date).format('HH:mm')}
                            .match-score
                                span.match-score-number(class = `${latestFixture.HomeTeamScore > latestFixture.AwayTeamScore ? 'match-score-number--leading' : ''}`) #{latestFixture.HomeTeamScore}
                                span.match-score-divider :
                                span.match-score-number(class = `${latestFixture.HomeTeamScore < latestFixture.AwayTeamScore ? 'match-score-number--leading' : ''}`) #{latestFixture.AwayTeamScore}
                            .match-time-lapsed
                                | #{latestFixture.status}
                            .match-referee
                                | Referee : 
                                strong #{latestFixture.Referee.split(',')[0]}
                    .column.slide-animation-FR
                        .team.team--away
                            .team-logo(data-team=`${latestFixture.AwayTeam.replace(/\s/g,'')}`)
                                img(src=`/img/${latestFixture.AwayTeam.replace(/\s/g,'')}.png`)
                            h2.team-name  #{latestFixture.AwayTeam}
                div.match--stats.slide-animation-UP
                    -let[homeStats,awayStats] = latestFixture.Statistics
                    each key of Object.keys(homeStats)
                        -let percentage = (homeStats[key] === awayStats[key]) ? 0.5 : parseInt(homeStats[key] || 0) / (parseInt(homeStats[key] || 0) + parseInt(awayStats[key] || 0))
                        p(style='font-size:16px;text-align:center'): strong #{key}           
                        .stat__progress
                            p #{parseInt(homeStats[key]) || 0}
                            progress.stats(max="100" value=`${percentage *100}`)
                            p #{parseInt(awayStats[key]) || 0}



